/**
 * IDL description of the RFXcomModule
 *
 * This file is automatically parsed by the rurbuilder backends for the omniidl compiler. The names of the functions
 * will become port identifiers. The names of the function variables are not used. 
 *
 * The syntax of the IDL file also allows for "inout", but not all middlewares will accept this yet.
 */

#pragma author               Anne C. van Rossum
#pragma copyright            Distributed Organisms B.V.
#pragma date                 Apr 18, 2014
#pragma license              GNU General Lesser Public

// Recommended namespace "rur"
module rur {

// The command-line parameter (this struct is required)
struct Param {
  // multiple modules can be addressed in parallel, killed, etc. using "module_id"
  string module_id;
  // a certain parameter over the command-line (long becomes int) 
  long parameter;
};

// Typedef for array of integers
typedef sequence<long> long_seq;

// The public interface of RFXcomModule
interface RFXcomModule {
  
  // Input towards device 0
  void Input0(in long_seq input0);

  // Type of device
  void Type0(in long type0);

  // Select which index to use
  void Select0(in long_seq select0);

  // Output of device 0
  void Output0(out long output0);

  // Input towards device 1
  void Input1(in long_seq input1);

  // Type of device
  void Type1(in long type1);
  
  // Select which index to use
  void Select1(in long_seq select1);

  // Output of device 1
  void Output1(out long output1);
 
/* 
  // just two devices for now

  // Input towards device 2
  void Input2(in long_seq input2);

  // Type of device
  void Type2(in long type2);

  // Select which index to use
  void Select2(in long_seq select2);

  // Output of device 2
  void Output2(out long output2);

  // Input towards device 3
  void Input3(in long_seq input3);

  // Type of device
  void Type3(in long type3);

  // Select which index to use
  void Select3(in long_seq select3);

  // Output of device 3
  void Output3(out long output3);
 */
};

};
