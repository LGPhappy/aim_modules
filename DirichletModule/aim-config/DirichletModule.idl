/**
 * IDL description of the DirichletModule
 *
 * This file is automatically parsed by the rurbuilder backends for the omniidl compiler. The names of the functions
 * will become port identifiers. The names of the function variables are not used. 
 *
 * The syntax of the IDL file also allows for "inout", but not all middlewares will accept this yet.
 */

#pragma author               Anne C. van Rossum
#pragma copyright            Distributed Organisms B.V.
#pragma date                 Oct 22, 2013
#pragma license              GNU General Lesser Public

// Recommended namespace "rur"
module rur {

// The command-line parameter (this struct is required)
struct Param {
  // multiple modules can be addressed in parallel, killed, etc. using "module_id"
  string module_id;
  // a certain parameter over the command-line (long becomes int) 
  long parameter;
};

// Typedef for array of integers
typedef sequence<long> long_seq;
typedef sequence<float> float_seq;
typedef sequence<double> double_seq;

// The public interface of DirichletModule
interface DirichletModule {

  // Configuration of the hyperparameters
  void Hyperparameters(in long_seq input);

  // Add a single observation (vector)
  void Observation(in float_seq input);

  // Train for N steps
  void DoTrain(in long input);

  // Get assignments to class indices for the observations (in the order with which the observations arrived)
  void Class(out long_seq output);

  // The functions below can also be used, but are more of theoretical interest (generation rather than inference)

  // Make the module generate an additional n items using the CRP
  void Generate(in long input);

  // Chinese Restaurant Process: generate (table) assignments 
  void CRP(out long_seq output);

};

};
