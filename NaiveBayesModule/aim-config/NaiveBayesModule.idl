/**
 * IDL description of the NaiveBayesModule
 *
 * This file is automatically parsed by the rurbuilder backends for the omniidl compiler. The names of the functions
 * will become port identifiers. The names of the function variables are not used. 
 *
 * The syntax of the IDL file also allows for "inout", but not all middlewares will accept this yet.
 */

#pragma author               Anne C. van Rossum
#pragma copyright            Distributed Organisms B.V.
#pragma date                 Jan 31, 2014
#pragma license              GNU General Lesser Public

// Recommended namespace "rur"
module rur {

// The command-line parameter (this struct is required)
struct Param {
  // multiple modules can be addressed in parallel, killed, etc. using "module_id"
  string module_id;
  // a certain parameter over the command-line (long becomes int) 
  long parameter;
};

// Typedef for array of integers
typedef sequence<long> long_seq;

// The public interface of NaiveBayesModule
interface NaiveBayesModule {

  // Supervised input, we accept samples in the form of a vector of nd-arrays [0 2 0 1 X data] 
  void Train(in long_seq input);

  // Input for testing, so only the training data, not the label, we accept the form [0 1 0 X data]
  void Test(in long_seq input);

  // Every time a test value is send, a class label is spit out over this channel
  void Class(out long output);

  // Same as class port, but also writing the data sample with it, of the form [0 2 0 1 X data]
  void TestResult(out long_seq output);

};

};
